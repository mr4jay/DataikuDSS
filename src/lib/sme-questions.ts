import type { Question } from './questions';

export const smeQuestions: Question[] = [
    {
    id: 401,
    slug: 'standardizing-project-folder-structure',
    question: 'How to get started with standardizing project folder structure?',
    answer: `### 1. Introduction/Overview
A consistent project folder structure is crucial for making projects easy to navigate and maintain. As an SME, you should define and enforce a standard structure for all new projects.

### 2. Prerequisites
- Admin rights or the ability to create project templates in Dataiku.

### 3. Step-by-Step Instructions
1.  **Define the Structure:** Agree on a standard folder structure. A common best practice is:
    *   **01_data_ingestion:** For recipes that bring data into the project.
    *   **02_data_preparation:** For cleaning and feature engineering.
    *   **03_modeling:** For ML model training and scoring.
    *   **04_data_export:** For recipes that push data to downstream systems.
    *   **99_archive:** For old or deprecated items.
2.  **Create a Template Project:** Build an empty Dataiku project that contains this folder structure.
3.  **Publish as Template:** As an admin, you can publish this project as a template that other users can select when creating a new project.
4.  **Document the Standard:** Add a page to your internal Wiki documenting the standard folder structure and why it's important.

### 4. Resources and Tools
- **An internal Wiki page** for documentation.
- **A Dataiku project template.**

### 5. Next Steps and Progression
- During project reviews, check if the project adheres to the standard structure. Use this as a coaching opportunity.

### 6. Common Challenges and Solutions
- **Challenge:** Existing projects are a mess.
- **Solution:** Don't try to refactor all old projects at once. Apply the new standard to all *new* projects and gradually refactor older projects when they are being updated.
- **Challenge:** Developers aren't using the template.
- **Solution:** Make the template easy to find and use. Communicate the new standard in team meetings and documentation.`,
  },
  {
    id: 402,
    slug: 'enforcing-naming-conventions',
    question: 'How to get started with enforcing naming conventions?',
    answer: `### 1. Introduction/Overview
Clear naming conventions for datasets, recipes, and variables make a Dataiku Flow readable and self-documenting. As an SME, you should define and enforce these conventions.

### 2. Prerequisites
- A clear idea of the naming conventions you want to use.

### 3. Step-by-Step Instructions
1.  **Define the Conventions:** Document a clear set of rules. For example:
    *   **Datasets:** \`<source_system>_<data_description>_<prepared/scored>\` (e.g., \`sfdc_opportunities_prepared\`).
    *   **Recipes:** Use the default names generated by Dataiku (e.g., \`prepare_opportunities\`).
    *   **Variables:** Use \`snake_case\` for project variables (e.g., \`my_project_variable\`).
2.  **Document and Socialize:** Create a page in your internal Wiki with the naming conventions. Announce it in your team's communication channels.
3.  **Use Code Reviews:** The best way to enforce conventions is during code/project reviews. If you see an item that doesn't follow the convention, ask the developer to rename it.
4.  **Leverage Flow Views:** In the Flow, use Views to color-code datasets based on their names (e.g., color all datasets ending in \`_prepared\` blue). This can visually highlight items that don't follow the convention.

### 4. Resources and Tools
- **An internal Wiki page** for documentation.
- **Dataiku Flow Views.**

### 5. Next Steps and Progression
- Build a Dataiku application that uses the REST API to scan projects and flag items that do not conform to naming conventions.

### 6. Common Challenges and Solutions
- **Challenge:** Developers forget the conventions.
- **Solution:** Be consistent with your reviews. After a few reminders, the conventions will become second nature. Keep the documentation easily accessible.
- **Challenge:** The conventions are too restrictive.
- **Solution:** Be open to feedback. The goal is clarity, not bureaucracy. If a convention is causing more trouble than it's worth, revise it with the team.`,
  },
];
